    <!-- BEGIN ADDED BY footer.ejs -->
    <footer></footer>
    <script>
      /**
        * @function - String.prototype.format adds the format function to the String type, allowing dynamic content to be injected in specified positions (i.e. {0})
        * @returns - The formatted string, with replacements made for passed-in parameters
      */
      String.prototype.format = function() {
        var content = this;
        for (var i = 0; i < arguments.length; i++) {
          var replacement = '{' + i + '}';
          content = content.replace(replacement, arguments[i]);
        }
        return content;
      };

      /**
        * @function - expandAll is called when the Expand/Collapse All button is clicked. If there is any unexpanded details section, then expand all secitons, otherwise collapse all sections
        * @returns - Nothing. Modifies global variables and DOM directly
      */
      function expandAll () {
        var expand = !!$(".checklist details").not("[open]").length

        for (var i = 0; i < localMasterChecklist.length; i++) {

          updateSkillProperty(localMasterChecklist[i], "expanded", expand);
          $(".checklist #" + localMasterChecklist[i].name).prop("open", expand);

          if (localMasterChecklist[i].subsections) {
            for (var j = 0; j < localMasterChecklist[i].subsections.length; j++) {
              updateSkillProperty(localMasterChecklist[i].subsections[j], "expanded", expand);
              $(".checklist #" + localMasterChecklist[i].subsections[j].name).prop("open", expand);
            }
          }
        };
      }

      /**
        * @function - expand is called when a summary element is clicked, saving off the new state, conditionally checking all secondary checkboxes underneath itself, and SOMEHOW triggering an update of the displayed percentages
        * @param {object} el - The target element
        * @returns - Nothing. Modifies global variables and DOM directly
      */
      function expand (el) {
        var $el = $(el).parents("details"),
            skillName = $el.prop("id");

        updateSkillProperty(skillName, "expanded", !($el.prop("open")));
      }

      /**
        * @function - updateItem is called when a checkbox is clicked, and manually sets the checked state, since clicking anything in a summary header triggers expansion
        * @param {object} evt - The event fired , so that we can prevent default and stop propagation to keep from expanding the summary content when clicking the checkbox label
        * @returns - Nothing. Modifies global variables and DOM directly
      */
      function updateItem (evt) {
        evt.preventDefault();
        evt.stopImmediatePropagation();

        var skillName = $(evt.target).parents("details").prop("id");

        updateSkillProperty(skillName, "complete", !($(evt.target).find("[type=checkbox]").first().prop("checked")));
      }

      function updateSkillProperty (skillName, skillProperty, skillValue) {
        for (var i = 0; i < localMasterChecklist.length; i++) {
          if (localMasterChecklist[i].name === skillName) {
            localMasterChecklist[i][skillProperty] = skillValue
            store.setItem("masterChecklist", localMasterChecklist);

            if (localMasterChecklist[i].subsections) {
              for (var j = 0; j < localMasterChecklist[i].subsections.length; j++) {
                localMasterChecklist[i].subsections[j][skillProperty] = skillValue;
              }
            }
            break;
          }
          if (localMasterChecklist[i].subsections) {
            for (var j = 0; j < localMasterChecklist[i].subsections.length; j++) {
              if (localMasterChecklist[i].subsections[j].name === skillName) {
                localMasterChecklist[i].subsections[j][skillProperty] = skillValue
                store.setItem("masterChecklist", localMasterChecklist);

                if (skillProperty === "complete" && skillValue === false) {
                  localMasterChecklist[i][skillProperty] = skillValue
                  store.setItem("masterChecklist", localMasterChecklist);
                }
                break;
              }
            }
          }
        };

        if (skillProperty === "complete") {
         calculateProgressPercentage(localMasterChecklist);
        }
      }

      /**
        * @function - updateDisplayText
        * @returns - Nothing. Modifies global variables and DOM directly
      */
      function updateDisplayText () {
        $(".header-title").html(lang.HEADING_CHECKLIST);
        $(".expand-collapse").html(lang.BUTTON_EXPAND_COLLAPSE);
      }

      /**
        * @function - calculateProgressPercentage determines the overall percentage complete a user is through a checklist
        * @param {array} checklist - list of skills sections, with completion statuses
        * @returns - Nothing
        * @calls updateProgressDisplay
      */
      function calculateProgressPercentage (checklist) {
        var $section,
            maxPoints = 0,
            totalPoints = 0
            $userChecklist = $("<div class='checklist-item'>");

        // Loop through and add base skills
        for (var i = 0; i < checklist.length; i++) {
          var $subsection,
              subsectionMaxPoints = 0,
              subsectionTotalPoints = 0;

          $section = $userChecklist.append(addDetailsSection(checklist[i]));

          maxPoints += checklist[i].value;


          // Loop through and add subsections
          if (checklist[i].subsections) {
            for (var j = 0; j < checklist[i].subsections.length; j++) {
              $subsection = $userChecklist.find("details#" + checklist[i].name).append(addDetailsSection(checklist[i].subsections[j], true));

              subsectionMaxPoints += checklist[i].subsections[j].value;
              if (checklist[i].subsections[j].complete) {
                subsectionTotalPoints += checklist[i].subsections[j].value;
              }
            }

            sectionPercentage = (subsectionMaxPoints !== 0)? subsectionTotalPoints/subsectionMaxPoints: 0;
            $subsection.find(".score").first().html("(" + sectionPercentage * 100 + "%)");
            if (sectionPercentage === 1) {
              $section.find("[type=checkbox]").first().prop("checked", true)
            }

            totalPoints += checklist[i].value * sectionPercentage;
          } else {
            if (checklist[i].complete) {
              totalPoints += checklist[i].value;
            }
          }
        }

        totalPercentage = (maxPoints !== 0)? totalPoints/maxPoints: 0;

        $(".checklist").empty().append($userChecklist);
        updateProgressDisplay(totalPercentage);
      }

      function addDetailsSection (skill, subsection) {
        // Repeatable html block for competencies
        return $("<details id='" + skill.name + "' " + ((skill.expanded)? "open": "") + "><summary onclick='expand(this)'><a id='user-content-" + skill.name + "' class='anchor' href='#" + skill.name +"' aria-hidden='true'></a>" + lang["SKILL_" + skill.name + "_LABEL"] + " <span class='score'>" + ((!subsection)? "(100%)": "") + "</span> <label onclick='updateItem(event)'><input type='checkbox' name='" + skill.name + "' " + ((skill.complete)? "checked": "") + " /> Complete </label></summary><div class='content'><div class='description'>" + lang["SKILL_" + skill.name + "_DESCRIPTION"] + "</div></div></details>");


        // <ul class='links'>
        // <i class='glyphicon glyphicon-tasks'></i><i class='glyphicon glyphicon-info-sign'></i>
        //   <li><a>Resource for helping with stuff</a></li>
        // </ul>
      }

      /**
        * @function - updateProgressDisplay takes a decimal percentage and sends it to the UI. Updates header and progress bar content.
        * @param {float} percentage - The total completeness percentage
        * @returns - Nothing. Modifies global variables and DOM directly
      */
      function updateProgressDisplay (percentage) {

        var $progressBar = $(".total-completeness .progress-bar");

        $progressBar
          .addClass("active")
          .css('width', percentage * 100 + "%")
          .attr("aria-valuenow", percentage * 100);

        setTimeout(function(){
          $progressBar
            .removeClass("progress-bar-danger progress-bar-warning progress-bar-info progress-bar-success");

          if (percentage <= 0.10) {
            $progressBar.addClass("progress-bar-danger");
          } else if (percentage <= 0.35) {
            $progressBar.addClass("progress-bar-warning");
          } else if (percentage < 0.90) {
            $progressBar.addClass("progress-bar-info");
          } else if (percentage >= 0.90) {
            $progressBar.addClass("progress-bar-success");
          }

          formattedPercentage = percentage.toLocaleString([locale, DEFAULT_LOCALE], {style: "percent"});

          $(".header-total-completeness").html(lang.HEADING_COMPLETENESS.format(formattedPercentage));

          $progressBar
            .removeClass("active");
        }, 1000);
        // CSS transition animation set to .2s, but timeout needed to be 1s to be in sync. :confused:
      }

      var localMasterChecklist,
          masterChecklist,
          userData,
          formattedPercentage,
          totalPercentage = 0;

      // TODO: ALSO HAVE LOCALLY STORED SKILLS, PROGRESS AND LANG JSON FOR FAST FIRST RENDER, AND AS A FALLBACK IN CASE FIREBASE IS INACCESSIBLE

      if (!window.localStorage) {
          window.alert("Your browser doesn't support localStorage. Your skills progress will not be saved across sessions.");
      } else {
        var store = {
          setItem: function(key, value) {
            localStorage.setItem("FHS." + key, JSON.stringify(value));
            return value;
          },

          getItem: function(key) {
            return JSON.parse(localStorage.getItem("FHS." + key));
          },

          removeItem: function(key) {
            localStorage.removeItem("FHS." + key)
          }
        };
      }

      // firebase config located in header.ejs
      firebase.database().ref("/_skills_sections").once("value").then(function(snapshot) {
        masterChecklist = snapshot.val();
        firebase.database().goOffline();

        localMasterChecklist = store.getItem('masterChecklist');

        // TODO: Merge the local skills list CORRECTLY with the one retrieved from the database, soas to get new additions
        if (!localMasterChecklist) {
          localMasterChecklist = store.setItem('masterChecklist', masterChecklist);
        } else {
          $.extend(masterChecklist, localMasterChecklist);
        }

        store.setItem('masterChecklist', masterChecklist);

        $("main").removeClass("loading");

        updateDisplayText();
        calculateProgressPercentage(localMasterChecklist);
      });

      // FOR USE AFTER OAUTH INTEGRATION
      // firebase.database().ref("/users/" + cisId).once("value").then(function(snapshot) {
      //   userData = snapshot.val();
      // $(".header-subtitle").html(lang.HEADING_FOR_NAME.format(userData.name));
      // });
    </script>
  </body>
</html>
